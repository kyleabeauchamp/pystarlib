[MASTER]
# This file is in ~ and hard linked into different projects.

# Specify a configuration file.
#rcfile=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Profiled execution.
profile=no

# Add <file or directory> to the black list. It should be a base name, not a
# path. You may set this option multiple times.
#ignore=Bogus

# Pickle collected data for later comparisons.
persistent=yes

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=


[MESSAGES CONTROL]

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time.
#enable=

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once).
#C0102: Black listed name "%s"
#C0103: Invalid name "%s" (should match %s)
#C0111: Missing docstring
#C0112: Empty docstring
#C0121: Missing required attribute "%s"
#C0202: Class method should have "cls" as first argument
#C0203: Metaclass method should have "mcs" as first argument
#C0301: Line too long (%s/%s)
#C0302: Too many lines in module (%s)
#C0321: More than one statement on a single line
#C0322: Operator not preceded by a space
#C0323: Operator not followed by a space
#C0324: Comma not followed by a space
#F0001 (error prevented analysis)
#F0002: %s: %s
#F0003: ignored builtin module %s
#F0004: unexpected infered value %s
#F0202: Unable to check methods signature (%s / %s)
#F0220: failed to resolve interfaces implemented by %s (%s)
#F0321: Format detection error in %r
#F0401: Unable to import %r (%s)
#I0001: Unable to run raw checkers on built-in module %s
#I0010: Unable to consider inline option %r
#I0011: Locally disabling %s
#I0012: Locally enabling %s
#I0013: Ignoring entire file
#R0001: Messages by category
#R0002: % errors / warnings by module
#R0003: Messages
#R0004: Global evaluation
#R0101: Statistics by type
#R0201: Method could be a function
#R0401: Cyclic import (%s)
#R0401: External dependencies
#R0402: Modules dependencies graph
#R0701: Raw metrics
#R0801: Duplication
#R0801: Similar lines in %s files
#R0901: Too many ancestors (%s/%s)
#R0902: Too many instance attributes (%s/%s)
#R0903: Too few public methods (%s/%s)
#R0904: Too many public methods (%s/%s)
#R0911: Too many return statements (%s/%s)
#R0912: Too many branches (%s/%s)
#R0913: Too many arguments (%s/%s)
#R0914: Too many local variables (%s/%s)
#R0915: Too many statements (%s/%s)
#R0921: Abstract class not referenced
#R0922: Abstract class is only referenced %s times
#R0923: Interface not implemented




# Enabled:
#W0101: Unreachable code
#W0104: Statement seems to have no effect
#W0105: String statement has no effect
#W0107: Unnecessary pass statement
#W0108: Lambda may not be necessary
#W0141: Used builtin function %r
#W0201: Attribute %r defined outside __init__
#W0211: Static method with %r as first argument
#W0212: Access to a protected member %s of a client class
#W0221: Arguments number differs from %s method
#W0222: Signature differs from %s method
#W0223: Method %r is abstract in class %r but is not overridden
#W0231: __init__ method from base class %r is not called
#W0232: Class has no __init__ method
#W0233: __init__ method from a non direct base class %r is called
#W0301: Unnecessary semicolon
#W0311: Bad indentation. Found %s %s, expected %s
#W0312: Found indentation with %ss instead of %ss
#W0331: Use of the <> operator
#W0332: Use l as long integer identifier
#W0333: Use of the `` operator
#W0403: Relative import %r
#W0406: Module import itself
#W0410: __future__ import is not the first non docstring statement
#W0511 (warning notes in code comments)
#W0601: Global variable %r undefined at the module level
#W0602: Using global for %r but no assigment is done
#W0603: Using the global statement
#W0604: Using the global statement at the module level
#W0612: Unused variable %r
#W0613: Unused argument %r
#W0631: Using possibly undefined loop variable %r
#W0703: Catch "Exception"
#W0704: Except doesn't do anything
#W0710: Exception doesn't inherit from standard "Exception" class
#W1001: Use of "property" on an old style class
#W1111: Assigning to function call which only returns None

# Disabled forever
#W0102 Dangerous default value [] 
#W0122 Use of the exec statement 
#W0142 Used * or ** magic   
#W0401 Wildcard import  
#W0402 Uses of a deprecated module 'xxx'
#W0404: Reimport %r (imported line %s)
#W0611 Unused import. Pydev
#W0614 Unused import
#W0621 Redefining name 'xxx' from outer scope
#W0622 Redefining built-in 'xxx' 
#W0701 Raising a string exception
#W0702 No exception type(s) specified
#C0322 Operator not preceded by a space
#C0323 Operator not followed by a space
#C0324 Comma not followed by a space
#F0401 Unable to import. xxx
#I0011 Locally disabling certain class of messages.
#I0013 Ignoring entire file
#R0911 Too many return statements
#R0912 Too many branches 
#R0913 Too many arguments
#R0914 Too many local variables
#R0915 Too many statements

disable=C0111,C0322,C0323,C0324,E0602,F0401,I0011,I0013,W0102,W0122,W0142,W0201,W0212,W0401,W0402,W0404,W0511,W0611,W0613,W0614,W0621,W0622,W0701,W0702,R0201,R0911,R0912,R0913,R0914,R0915

[REPORTS]

# Set the output format. Available formats are text, parseable, colorized, msvs
# (visual studio) and html
# NB: For Eclipse integration with pydev it needs to be text but for Jenkins integration it needs to be parseable.
output-format=parseable

# Include message's id in output
include-ids=yes

# Put messages in a separate file for each module / package specified on the
# command line instead of printing them on stdout. Reports (if any) will be
# written in a file name "pylint_global.[txt|html]".
files-output=no

# Tells whether to display a full report or only the messages
reports=yes
#reports=no

# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (RP0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Add a comment according to your evaluation note. This is used by the global
# evaluation report (RP0004).
comment=no


[BASIC]

# Required attributes for module, separated by a comma
required-attributes=

# List of builtins function names that should not be used, separated by a comma
#bad-functions=map,filter,apply,input
bad-functions=filter,input

# Regular expression which should only match correct module names
#module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$
module-rgx=(([a-zA-Z_][a-zA-Z0-9_]*)|([a-zA-Z][a-zA-Z0-9]+))$

# Regular expression which should only match correct module level names
#const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$
const-rgx=(([a-zA-Z_][a-zA-Z0-9_]*)|([a-zA-Z][a-zA-Z0-9]+))$

# Regular expression which should only match correct class names
class-rgx=[A-Z_][a-zA-Z0-9_]+$

# Regular expression which should only match correct function names
#function-rgx=[a-z_][a-z0-9_]{2,30}$
function-rgx=[a-z_][a-zA-Z0-9_]{2,30}$

# Regular expression which should only match correct method names
#method-rgx=[a-z_][a-z0-9_]{2,30}$
method-rgx=[a-zA-Z_][a-zA-Z0-9_]{2,30}$

# Regular expression which should only match correct instance attribute names
#attr-rgx=[a-z_][a-z0-9_]{2,30}$
attr-rgx=[a-z_][a-zA-Z0-9_]{1,30}$

# Regular expression which should only match correct argument names
#argument-rgx=[a-z_][a-z0-9_]{2,30}$
argument-rgx=[a-z_][a-zA-Z0-9_]{1,30}$

# Regular expression which should only match correct variable names
#variable-rgx=[a-z_][a-z0-9_]{2,30}$
variable-rgx=[a-z_][a-zA-Z0-9_]{1,30}$

# Regular expression which should only match correct list comprehension /
# generator expression variable names
inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$

# Good variable names which should always be accepted, separated by a comma
#good-names=i,j,k,ex,Run,_
good-names=a,b,c,d,e,f,g,h,i,j,k,m,n,p,q,r,s,t,u,v,w,x,y,z,ex,Run,_

# Bad variable names which should always be refused, separated by a comma
#bad-names=foo,bar,baz,toto,tutu,tata
bad-names=foo,bar,baz,toto,tutu,tata,l,o

# Regular expression which should only match functions or classes name which do
# not require a docstring
no-docstring-rgx=__.*__


[FORMAT]

# Maximum number of characters on a single line.
max-line-length=140

# Maximum number of lines in a module
max-module-lines=5000

# String used as indentation unit. This is usually " " (4 spaces) or "\t" (1
# tab).
indent-string='    '


[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,XXX,TODO


[SIMILARITIES]

# Minimum lines number of a similarity.
min-similarity-lines=4

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes


[TYPECHECK]

# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# List of classes names for which member attributes should not be checked
# (useful for classes with attributes dynamically set).
ignored-classes=SQLObject

# When zope mode is activated, add a predefined set of Zope acquired attributes
# to generated-members.
zope=no

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E0201 when accessed.
generated-members=REQUEST,acl_users,aq_parent


[VARIABLES]

# Tells whether we should check for unused import in __init__ files.
init-import=no

# A regular expression matching the beginning of the name of dummy variables
# (i.e. not used).
dummy-variables-rgx=_|dummy

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible.
additional-builtins=


[CLASSES]

# List of interface methods to ignore, separated by a comma. This is used for
# instance to not check methods defines in Zope's Interface base class.
ignore-iface-methods=isImplementedBy,deferred,extends,names,namesAndDescriptions,queryDescriptionFor,getBases,getDescriptionFor,getDoc,getName,getTaggedValue,getTaggedValueTags,isEqualOrExtendedBy,setTaggedValue,isImplementedByInstancesOf,adaptWith,is_implemented_by

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,setUp


[DESIGN]

# Maximum number of arguments for function / method
max-args=5

# Argument names that match this expression will be ignored. Default to name
# with leading underscore
ignored-argument-names=_.*

# Maximum number of locals for function / method body
max-locals=15

# Maximum number of return / yield for function / method body
max-returns=6

# Maximum number of branch for function / method body
max-branchs=12

# Maximum number of statements in function / method body
max-statements=50

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of attributes for a class (see R0902).
max-attributes=40

# Minimum number of public methods for a class (see R0903).
min-public-methods=2

# Maximum number of public methods for a class (see R0904).
max-public-methods=60


[IMPORTS]

# Deprecated modules which should not be used, separated by a comma
deprecated-modules=regsub,string,TERMIOS,Bastion,rexec

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled)
import-graph=

# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled)
ext-import-graph=

# Create a graph of internal dependencies in the given file (report RP0402 must
# not be disabled)
int-import-graph=
